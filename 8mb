#!/bin/bash

# Initializing this variable so bash is happy
packageSearch=""

# Determines what flavour of linux the user is running (Arch, Debiam, or Redhat)
# Then adjusts the package search and install commands accordingly
if [[ -f /etc/arch-release ]]; then
    echo "Arch-based OS detected"
    packageSearch="pacman -Q"
    packageInstall="sudo pacman -Syu"

elif [[ -f /etc/debian_version ]]; then
    echo "Debian-based OS detected"
    packageSearch="apt search"
    packageInstall="sudo aot-get install"

elif [[ -f /etc/redhat-release ]]; then
    echo "Redhat-based OS detected"
    packageSearch="rpm -qa | grep -w"
    packageInstall="dnf install"

else # If linux isn't found, program exits
    echo "Unsupported OS detected. Terminating"
    exit 1
fi

# If either dependency isn't installed, install it using the system's package manager
if ! $packageSearch python; then
    echo "Python not found. Installing..."
    $packageInstall python
fi

if ! $packageSearch ffmpeg; then
    echo "Ffmpeg not found. Installing..."
    $packageInstall ffmpeg
fi

# Set default values for python program
size=10
tolerance=5

# Prints a message regarding how to use the program
usage() {
    echo "Usage: $0 -f <file> [-s <size>] [-t <tolerance>]"
    echo "  -f <file>      File to compress"
    echo "  -s <size>      Target size in MB (default: 10)"
    echo "  -t <tolerance> Tolerance in % (default: 5)"
    echo "  -h             Display this help message"
}

# Should parse arguments. If no flags are given, display usage and exit with code 1
# Refer to above for flag definitions
while getopts f:s:t:h flag
do
    case "${flag}" in
        f) file=${OPTARG};;
        s) size=${OPTARG};;
        t) tolerance=${OPTARG};; 
        h) usage 
           exit 0;;
        *) echo ""
           usage
           exit 1;;
    esac
done

# Should exit unsuccessfully if no file has been provided, and program hasn't already exited
if [ -z "$file" ]; then
    usage
    exit 1
fi

# File, size, and tolerance are all passed from the command as args
python ./8mb.py --file "$file" --size "$size" --tolerance "$tolerance"